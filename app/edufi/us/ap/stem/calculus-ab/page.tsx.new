"use client"

import { useState, useEffect, useRef } from "react"
import dynamic from "next/dynamic"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Loader2, Send, MessageSquare, Volume2, VolumeX } from "lucide-react"
import { useToast } from "@/hooks/use-toast"
// import { checkCreditBalance } from "@/lib/credits"
// import { useCredits } from "@/hooks/use-credits"

// Create a client-only component that will be dynamically imported
function APCalculusABContent() {
  // Import the SDK only on the client side
  const sdk = typeof window !== 'undefined' ? require('@d-id/client-sdk') : null;
  
  const { toast } = useToast()
  // const { credits } = useCredits()
  const [message, setMessage] = useState("")
  const [chatHistory, setChatHistory] = useState<{ role: string; content: string; id: string }[]>([])
  const [isMuted, setIsMuted] = useState(false)
  const [isProcessing, setIsProcessing] = useState(false)
  const [loading, setLoading] = useState(true)
  const [connected, setConnected] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const videoRef = useRef<HTMLVideoElement>(null)
  const agentManagerRef = useRef<any>(null)
  const srcObjectRef = useRef<MediaStream | null>(null)
  
  // D-ID Agent configuration
  const agentId = "agt_Glxsk2sr"
  const clientKey = "YXV0aDB8NjdmZjkwZThiNjAzMWMwYmY3MmViNmFkOjVVcFhtNlJ4V0l1b2s2TGNBS05KOA=="

  // Credit check for message - commented out as requested
  /*
  const checkCreditsForMessage = (messageText: string) => {
    // Calculate required credits (0.1 credits per 1000 characters, minimum 0.1)
    const requiredCredits = Math.max(0.1, (messageText.length / 1000) * 0.1)
    
    // Check if user has enough credits
    if (credits < requiredCredits) {
      toast({
        title: "Insufficient Credits",
        description: `You need ${requiredCredits.toFixed(2)} credits to send this message. You have ${credits.toFixed(2)} credits available.`,
        variant: "destructive"
      })
      return false
    }
    return true
  }
  */

  // Function to ensure audio is enabled
  const ensureAudioEnabled = () => {
    if (videoRef.current) {
      videoRef.current.muted = false
      videoRef.current.volume = 1.0
      setIsMuted(false)
      console.log("Audio enabled with volume:", videoRef.current.volume)
      
      // Try to play the video to ensure audio works
      videoRef.current.play().catch(e => {
        console.error("Error playing video:", e)
      })
    }
  }

  useEffect(() => {
    // Add event listener for user interaction to enable audio
    const handleUserInteraction = () => {
      ensureAudioEnabled()
      // Remove the event listeners after first interaction
      document.removeEventListener('click', handleUserInteraction)
      document.removeEventListener('touchstart', handleUserInteraction)
    }
    
    document.addEventListener('click', handleUserInteraction)
    document.addEventListener('touchstart', handleUserInteraction)
    
    return () => {
      document.removeEventListener('click', handleUserInteraction)
      document.removeEventListener('touchstart', handleUserInteraction)
    }
  }, [])

  useEffect(() => {
    // Check if we're running in the browser
    if (typeof window === 'undefined') return;
    
    const initializeAgent = async () => {
      try {
        setLoading(true)
        
        // Define callback functions for the D-ID SDK
        const callbacks = {
          onSrcObjectReady: (value: MediaStream | null) => {
            console.log("Source object ready:", value ? "MediaStream received" : "No MediaStream")
            if (videoRef.current && value) {
              videoRef.current.srcObject = value
              srcObjectRef.current = value
              videoRef.current.muted = false
              videoRef.current.volume = 1.0
            }
          },
          onVideoStateChange: (state: string) => {
            console.log("Video state changed:", state)
            if (state === "playing") {
              setLoading(false)
            }
          },
          onConnectionStateChange: (state: string) => {
            console.log("Connection state changed:", state)
            
            if (state === "connected") {
              setConnected(true)
              setLoading(false)
              
              // Send a welcome message after connection
              setTimeout(async () => {
                try {
                  if (agentManagerRef.current) {
                    await agentManagerRef.current.speak({
                      type: "text",
                      input: "Hello! I'm your AP Calculus AB tutor. How can I help you today?"
                    })
                  }
                } catch (error) {
                  console.error("Error sending welcome message:", error)
                }
              }, 1000)
            } else if (state === "disconnected") {
              setConnected(false)
              
              // Try to reconnect if disconnected
              if (agentManagerRef.current) {
                console.log("Attempting to reconnect...")
                try {
                  agentManagerRef.current.reconnect()
                  console.log("Reconnection successful")
                } catch (error) {
                  console.error("Reconnection failed:", error)
                  toast({
                    title: "Connection Lost",
                    description: "Lost connection to the virtual tutor. Please refresh the page.",
                    variant: "destructive"
                  })
                }
              }
            }
          },
          onNewMessage: (messages: any[], type: string) => {
            console.log("New message received:", messages, type)
            
            // Add agent message to chat history
            if (messages && messages.length > 0) {
              const latestMessage = messages[messages.length - 1]
              if (latestMessage.text) {
                setChatHistory(prev => [...prev, {
                  role: "assistant",
                  content: latestMessage.text,
                  id: `assistant-${Date.now()}`
                }])
                setIsProcessing(false)
              }
            }
          },
          onError: (error: any, errorData: any) => {
            console.error("D-ID SDK Error:", error, errorData)
            
            // Handle different types of errors
            let errorMessage = "An error occurred with the virtual tutor."
            
            if (errorData && errorData.status === 401) {
              errorMessage = "Authentication error. Please refresh the page."
            } else if (errorData && errorData.status >= 500) {
              errorMessage = "Server error. Please try again later."
            }
            
            toast({
              title: "Error",
              description: errorMessage,
              variant: "destructive"
            })
            
            setLoading(false)
          }
        }
        
        // Initialize the D-ID agent
        if (sdk) {
          try {
            console.log("Initializing D-ID agent...")
            const agentManager = await sdk.createAgentManager({
              agentId,
              clientKey,
              videoElement: videoRef.current!,
              callbacks
            })
            
            agentManagerRef.current = agentManager
            console.log("D-ID agent initialized successfully")
          } catch (error) {
            console.error("Error initializing D-ID agent:", error)
            setLoading(false)
            toast({
              title: "Initialization Error",
              description: "Failed to initialize the virtual tutor. Please refresh the page.",
              variant: "destructive"
            })
          }
        } else {
          console.error("D-ID SDK not available")
          setLoading(false)
          toast({
            title: "SDK Error",
            description: "Virtual tutor SDK not available. Please refresh the page.",
            variant: "destructive"
          })
        }
      } catch (error) {
        console.error("Error in initializeAgent:", error)
        setLoading(false)
        toast({
          title: "Error",
          description: "An unexpected error occurred. Please refresh the page.",
          variant: "destructive"
        })
      }
    }

    // Start the initialization process
    initializeAgent()

    // Cleanup function
    return () => {
      if (agentManagerRef.current) {
        try {
          agentManagerRef.current.disconnect()
          console.log("D-ID agent disconnected")
        } catch (error) {
          console.error("Error disconnecting D-ID agent:", error)
        }
      }
      
      // Clean up video srcObject
      if (videoRef.current) {
        videoRef.current.srcObject = null
      }
      
      if (srcObjectRef.current) {
        try {
          srcObjectRef.current.getTracks().forEach(track => track.stop())
          srcObjectRef.current = null
        } catch (error) {
          console.error("Error cleaning up media tracks:", error)
        }
      }
    }
  }, [])

  // Scroll to bottom of chat when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }, [chatHistory])

  const handleSendMessage = async () => {
    if (!message.trim() || isProcessing) return
    
    try {
      setIsProcessing(true)
      
      // Add user message to chat history
      setChatHistory(prev => [...prev, {
        role: "user",
        content: message,
        id: `user-${Date.now()}`
      }])
      
      // Store the message to send
      const messageToSend = message
      
      // Clear input field immediately for better UX
      setMessage("")
      
      console.log("Sending message to agent:", messageToSend)
      
      // Send message using the SDK
      if (agentManagerRef.current) {
        try {
          // Check connection status
          if (!connected) {
            // Try to reconnect
            try {
              await agentManagerRef.current.reconnect()
              console.log("Reconnection successful")
              setConnected(true)
            } catch (reconnectError) {
              console.error("Reconnection failed:", reconnectError)
              toast({
                title: "Connection Error",
                description: "Cannot connect to the virtual tutor. Please refresh the page.",
                variant: "destructive"
              })
              setIsProcessing(false)
              return
            }
          }
          
          // Send the message using chat method
          await agentManagerRef.current.chat(messageToSend)
        } catch (error) {
          console.error("Error sending message with chat method:", error)
          
          // Try fallback method
          try {
            await agentManagerRef.current.speak({
              type: "text",
              input: messageToSend
            })
          } catch (fallbackError) {
            console.error("Fallback method also failed:", fallbackError)
            throw fallbackError
          }
        }
      } else {
        console.error('Agent manager not found')
        toast({
          title: "Connection Error",
          description: "Cannot communicate with the virtual tutor. Please refresh the page.",
          variant: "destructive"
        })
        setIsProcessing(false)
      }
    } catch (error) {
      console.error("Error sending message:", error)
      toast({
        title: "Error",
        description: "Failed to send message. Please try again or refresh the page.",
        variant: "destructive"
      })
      setIsProcessing(false)
    }
  }

  const toggleMute = () => {
    if (videoRef.current) {
      if (videoRef.current.muted) {
        videoRef.current.muted = false
        setIsMuted(false)
        console.log("Audio unmuted")
      } else {
        videoRef.current.muted = true
        setIsMuted(true)
        console.log("Audio muted")
      }
    }
  }

  const sendVoiceMessage = async () => {
    if (isProcessing) return;
    
    try {
      setIsProcessing(true);
      
      // Add user message to chat history
      const messageId = `voice-${Date.now()}`;
      setChatHistory(prev => [...prev, {
        role: "user",
        content: "🗣️ Voice message: I have a question about calculus concepts",
        id: messageId
      }]);
      
      if (agentManagerRef.current) {
        // Check connection status
        if (!connected) {
          try {
            // Try to reconnect
            await agentManagerRef.current.reconnect();
            console.log("Reconnection successful");
            setConnected(true);
          } catch (reconnectError) {
            console.error("Reconnection failed:", reconnectError);
            toast({
              title: "Connection Error",
              description: "Cannot connect to the virtual tutor. Please refresh the page.",
              variant: "destructive"
            });
            setIsProcessing(false);
            return;
          }
        }
        
        try {
          // Send a predefined message to the D-ID agent
          console.log("Sending voice message to D-ID agent");
          await agentManagerRef.current.chat("I have a question about calculus concepts");
          console.log("Voice message sent successfully");
        } catch (error) {
          console.error("Error sending voice message:", error);
          toast({
            title: "Error",
            description: "Failed to send voice message. Please try again.",
            variant: "destructive"
          });
          setIsProcessing(false);
        }
      } else {
        console.error('Agent manager not found');
        toast({
          title: "Connection Error",
          description: "Cannot communicate with the virtual tutor. Please refresh the page.",
          variant: "destructive"
        });
        setIsProcessing(false);
      }
    } catch (error) {
      console.error("Error processing voice message:", error);
      toast({
        title: "Error",
        description: "Failed to send voice message. Please try again.",
        variant: "destructive"
      });
      setIsProcessing(false);
    }
  }

  return (
    <div className="container mx-auto py-2 h-[90dvh] flex flex-col overflow-hidden">
      <h1 className="text-xl md:text-2xl lg:text-3xl font-bold mb-2 md:mb-4 px-1">AP Calculus AB - Interactive Learning</h1>
      
      <div className="flex-1 grid grid-cols-1 lg:grid-cols-12 gap-2 md:gap-4 lg:gap-6 overflow-hidden">
        {/* Left column - Resources and Chat */}
        <div className="lg:col-span-7 order-2 lg:order-1 flex flex-col overflow-hidden h-[calc(100%-200px)] lg:h-auto">
          <Tabs defaultValue="chat" className="flex flex-col h-full">
            <TabsList className="grid w-full grid-cols-2 mb-1 md:mb-2">
              <TabsTrigger value="chat">Chat</TabsTrigger>
              <TabsTrigger value="resources">Learning Resources</TabsTrigger>
            </TabsList>
            
            <TabsContent value="chat" className="flex-1 overflow-hidden">
              <Card className="flex flex-col h-full border-0 sm:border shadow-none sm:shadow">
                <CardHeader className="pb-1 md:pb-2 px-2 sm:px-6">
                  <CardTitle className="text-base md:text-lg">Chat with Your Tutor</CardTitle>
                  <CardDescription className="text-xs md:text-sm">
                    Ask questions about derivatives, integrals, limits, and more
                  </CardDescription>
                </CardHeader>
                
                <CardContent className="flex-1 overflow-y-auto pt-1 md:pt-2 px-2 sm:px-6">
                  <div className="space-y-2 md:space-y-4">
                    {chatHistory.map((msg) => (
                      <div 
                        key={msg.id}
                        className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}
                      >
                        <div 
                          className={`max-w-[85%] rounded-lg px-3 py-1.5 md:px-4 md:py-2 text-sm md:text-base ${
                            msg.role === 'user' 
                              ? 'bg-primary text-primary-foreground' 
                              : 'bg-muted'
                          }`}
                        >
                          {msg.content}
                        </div>
                      </div>
                    ))}
                    <div ref={messagesEndRef} />
                  </div>
                </CardContent>
                
                <CardFooter className="border-t pt-2 md:pt-3 px-2 sm:px-6">
                  <div className="flex w-full items-center gap-1 md:gap-2">
                    <div className="relative flex-grow">
                      <Textarea
                        placeholder="Ask a question..."
                        value={message}
                        onChange={(e) => setMessage(e.target.value)}
                        onKeyDown={(e) => {
                          if (e.key === 'Enter' && !e.shiftKey) {
                            e.preventDefault()
                            handleSendMessage()
                          }
                        }}
                        className="pr-12 md:pr-16 min-h-[40px] md:min-h-[50px] text-sm md:text-base"
                        disabled={!connected || isProcessing}
                        style={{ paddingRight: '60px', resize: 'none' }}
                      />
                      <div className="absolute right-1 md:right-2 bottom-1 md:bottom-2 flex items-center gap-1">
                        <Button 
                          variant="ghost" 
                          size="icon"
                          onClick={toggleMute}
                          disabled={!connected}
                          className="h-6 w-6 md:h-8 md:w-8 rounded-full hover:bg-slate-200 dark:hover:bg-slate-700"
                          title="Toggle audio"
                        >
                          {isMuted ? <VolumeX className="h-3 w-3 md:h-4 md:w-4" /> : <Volume2 className="h-3 w-3 md:h-4 md:w-4" />}
                        </Button>
                        
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={sendVoiceMessage}
                          disabled={!connected || isProcessing}
                          className="h-6 w-6 md:h-8 md:w-8 rounded-full hover:bg-slate-200 dark:hover:bg-slate-700"
                          title="Send voice message"
                        >
                          <MessageSquare className="h-3 w-3 md:h-4 md:w-4" />
                        </Button>
                      </div>
                    </div>
                    <Button 
                      onClick={handleSendMessage}
                      disabled={!message.trim() || !connected || isProcessing}
                      className="rounded-full h-8 w-8 md:h-10 md:w-10 p-0 flex items-center justify-center bg-primary hover:bg-primary/90"
                    >
                      {isProcessing ? (
                        <Loader2 className="h-4 w-4 md:h-5 md:w-5 animate-spin" />
                      ) : (
                        <Send className="h-4 w-4 md:h-5 md:w-5" />
                      )}
                    </Button>
                  </div>
                </CardFooter>
              </Card>
            </TabsContent>
            
            <TabsContent value="resources" className="flex-1 overflow-hidden">
              <Card className="h-full flex flex-col border-0 sm:border shadow-none sm:shadow">
                <CardHeader className="pb-1 md:pb-2 px-2 sm:px-6">
                  <CardTitle className="text-base md:text-lg">AP Calculus AB Resources</CardTitle>
                  <CardDescription className="text-xs md:text-sm">
                    Helpful materials to support your calculus studies
                  </CardDescription>
                </CardHeader>
                <CardContent className="flex-1 overflow-y-auto px-2 sm:px-6">
                  <div className="space-y-3 md:space-y-4">
                    <h3 className="text-sm md:text-lg font-medium">Key Topics</h3>
                    <ul className="list-disc pl-4 md:pl-5 space-y-1 md:space-y-2 text-sm md:text-base">
                      <li>Limits and Continuity</li>
                      <li>Differentiation: Definition and Fundamental Properties</li>
                      <li>Differentiation: Composite, Implicit, and Inverse Functions</li>
                      <li>Contextual Applications of Differentiation</li>
                      <li>Analytical Applications of Differentiation</li>
                      <li>Integration and Accumulation of Change</li>
                      <li>Differential Equations</li>
                      <li>Applications of Integration</li>
                    </ul>
                    
                    <h3 className="text-sm md:text-lg font-medium mt-3 md:mt-6">Exam Preparation</h3>
                    <ul className="list-disc pl-4 md:pl-5 space-y-1 md:space-y-2 text-sm md:text-base">
                      <li>AP Calculus AB exam format: Multiple Choice and Free Response</li>
                      <li>Calculator and non-calculator sections</li>
                      <li>Practice problems and past exams</li>
                      <li>Study strategies and time management</li>
                    </ul>
                    
                    <h3 className="text-sm md:text-lg font-medium mt-3 md:mt-6">Additional Resources</h3>
                    <ul className="list-disc pl-4 md:pl-5 space-y-1 md:space-y-2 text-sm md:text-base">
                      <li>College Board AP Calculus AB Course Description</li>
                      <li>Interactive calculus visualizations</li>
                      <li>Video tutorials for complex topics</li>
                      <li>Formula sheets and quick reference guides</li>
                    </ul>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
        
        {/* Right column - D-ID Agent */}
        <div className="lg:col-span-5 order-1 lg:order-2 flex flex-col items-center justify-start h-[200px] lg:h-full">
          <div className="relative w-full max-w-[280px] sm:max-w-xs md:max-w-sm lg:max-w-md mx-auto bg-black rounded-lg overflow-hidden shadow-xl">
            {/* Tutor avatar image - shown before video loads */}
            <div className="absolute inset-0 flex items-center justify-center z-0">
              <img 
                src="/images/tutor-avatar.png" 
                alt="Calculus Tutor" 
                className="w-full h-full object-cover"
                onError={(e) => {
                  // Fallback if image doesn't exist
                  e.currentTarget.style.display = 'none';
                }}
              />
            </div>
            
            {loading && (
              <div className="absolute inset-0 flex items-center justify-center bg-black/50 z-10">
                <Loader2 className="h-6 w-6 md:h-8 md:w-8 animate-spin text-primary" />
                <span className="ml-2 text-white text-sm md:text-base">Connecting...</span>
              </div>
            )}
            
            <video 
              ref={videoRef}
              autoPlay 
              playsInline
              muted={false}
              className="w-full aspect-square sm:aspect-[4/5] md:aspect-[3/4] object-cover z-5 relative"
              onLoadedMetadata={() => {
                console.log("Video metadata loaded")
                if (videoRef.current) {
                  videoRef.current.muted = false
                  videoRef.current.volume = 1.0
                  console.log("Video element ready, unmuted with volume set to 1.0")
                }
              }}
            />
            
            {/* Controls overlay */}
            <div className="absolute bottom-0 left-0 right-0 p-1 md:p-2 bg-gradient-to-t from-black/70 to-transparent flex justify-center items-center z-20">
              <div className="flex space-x-2">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={toggleMute}
                  disabled={!connected}
                  className="h-8 w-8 md:h-auto md:w-auto text-white hover:bg-white/20 p-1 md:p-2"
                >
                  {isMuted ? <VolumeX className="h-4 w-4" /> : <Volume2 className="h-4 w-4" />}
                  <span className="hidden md:inline ml-1 text-xs">{isMuted ? "Unmute" : "Mute"}</span>
                </Button>
              </div>
            </div>
          </div>
          
          {/* Tutor information */}
          <div className="mt-1 md:mt-4 text-center">
            <h2 className="text-base md:text-xl font-semibold">Your Virtual Tutor</h2>
            <p className="text-xs md:text-sm text-muted-foreground">Expert in AP Calculus AB</p>
          </div>
        </div>
      </div>
    </div>
  )
}

// Use dynamic import with no SSR to prevent the component from loading during server-side rendering
const ClientOnlyAPCalculusABContent = dynamic(
  () => Promise.resolve(APCalculusABContent), 
  { ssr: false }
);

// Export a simple wrapper component that will render the client-only component
export default function APCalculusABPage() {
  return <ClientOnlyAPCalculusABContent />;
}
