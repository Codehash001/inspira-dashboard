// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  walletId    String   @id @map("wallet_id")
  username    String?
  createdAt   DateTime @default(now()) @map("created_at")
  plan        String?  // free, pro, ultra
  lastFreeClaim DateTime? @map("last_free_claim")

  // Relations
  creditBalances         CreditBalance[]
  chatHistory           ChatHistory[]
  imageGenerationHistory ImageGenerationHistory[]
  videoGenerationHistory VideoGenerationHistory[]
  bookGradingHistory    BookGradingHistory[]
  contractAuditHistory  SmartContractAudit[]
  transactions          Transaction[]

  @@map("users")
}

model Transaction {
  id              Int      @id @default(autoincrement())
  walletId        String   @map("wallet_id")
  transactionType String   @map("transaction_type") // subscribe, unsubscribe, buy_credits
  createdAt       DateTime @default(now()) @map("created_at")
  transactionHash String?  @map("transaction_hash")
  status          String   @default("pending") // pending, completed, failed
  paymentMethod   String   @map("payment_method") // INSPI, USDT
  paymentAmount   Float    @map("payment_amount")
  creditsAdded    Float    @map("credits_added")
  transactionFee  Float    @map("transaction_fee")
  transactionNote String?  @map("transaction_note")
  
  // Relations
  user            User     @relation(fields: [walletId], references: [walletId])
  creditBalances  CreditBalance[]

  @@map("transactions")
}

model CreditBalance {
  id               Int      @id @default(autoincrement())
  walletId         String   @map("wallet_id")
  plan             String   // free, pro, ultra
  allowedCredits   Float    @map("allowed_credits")
  purchasedDate    DateTime @default(now()) @map("purchased_date")
  expiredDate      DateTime @map("expired_date")
  creditUsed       Float    @default(0) @map("credit_used")
  usedFor          String?  @map("used_for")
  remainingBalance Float    @map("remaining_balance")
  
  // Relations
  user             User     @relation(fields: [walletId], references: [walletId])
  transaction      Transaction @relation(fields: [transactionId], references: [id])
  transactionId    Int      @map("transaction_id")

  @@map("credit_balances")
}

model ChatHistory {
  id             Int      @id @default(autoincrement())
  walletId       String   @map("wallet_id")
  sessionId      String   @map("session_id")
  sessionName    String   @map("session_name")
  userMessage    String   @map("user_message")
  botMessage     String   @map("bot_message")
  conversationId String   @map("conversation_id")
  creditUsed     Float    @map("credit_used")
  tokenUsed      Int      @map("token_used")
  createdAt      DateTime @default(now()) @map("created_at")
  user           User     @relation(fields: [walletId], references: [walletId])

  @@map("chat_history")
}

model ImageGenerationHistory {
  id          Int      @id @default(autoincrement())
  walletId    String   @map("wallet_id")
  imageId     String   @unique @map("image_id")
  imageUrl    String   @map("image_url")
  createdAt   DateTime @default(now()) @map("created_at")
  creditUsed  Float    @map("credit_used")
  tokenUsed   Int      @map("token_used")
  resolution  String
  prompt      String?  @map("prompt")
  quality     String?  @map("quality")
  user        User     @relation(fields: [walletId], references: [walletId])

  @@map("image_generation_history")
}

model VideoGenerationHistory {
  id          Int      @id @default(autoincrement())
  walletId    String   @map("wallet_id")
  videoId     String   @unique @map("video_id")
  videoUrl    String?  @map("video_url")
  createdAt   DateTime @default(now()) @map("created_at")
  creditUsed  Float    @map("credit_used")
  tokenUsed   Int      @map("token_used")
  resolution  String?
  quality     String?  @map("quality")
  prompt      String?  @map("prompt")
  model       String   @default("video-01") @map("model")
  status      String   @default("pending") @map("status")
  error       String?  @map("error")
  user        User     @relation(fields: [walletId], references: [walletId])

  @@map("video_generation_history")
}

model BookGradingHistory {
  id           Int      @id @default(autoincrement())
  walletId     String   @map("wallet_id")
  bookId       String   @unique @map("book_id")
  bookName     String   @map("book_name")
  authorName   String?  @map("author_name")
  bookGrade    String?  @map("book_grade")
  analysis     String   @map("analysis")
  createdAt    DateTime @default(now()) @map("created_at")
  creditUsed   Float    @map("credit_used")
  tokenUsed    Int      @map("token_used")
  user         User     @relation(fields: [walletId], references: [walletId])

  @@map("book_grading_history")
}

model SmartContractAudit {
  id           Int      @id @default(autoincrement())
  walletId     String   @map("wallet_id")
  contractId   String   @unique @map("contract_id")
  contractName String   @map("contract_name")
  contractCode String   @map("contract_code") @db.Text
  analysis     String   @map("analysis") @db.Text
  severity     String?  @map("severity")
  vulnerabilities Json? @map("vulnerabilities")
  createdAt    DateTime @default(now()) @map("created_at")
  creditUsed   Float    @map("credit_used")
  tokenUsed    Int      @map("token_used")
  user         User     @relation(fields: [walletId], references: [walletId])

  @@map("smart_contract_audit")
}
